datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ตารางผู้ใช้ (Users) - เก็บข้อมูลพนักงานหรือผู้ดูแลระบบ
model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  password      String
  email         String?   @unique
  firstName     String?
  lastName      String?
  role          String    @default("STAFF") // เช่น ADMIN, STAFF
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]   // ความสัมพันธ์: ผู้ใช้สามารถสร้างคำสั่งซื้อได้
  sales         Sale[]    // ความสัมพันธ์: ผู้ใช้สามารถบันทึกการขายได้
}

// ตารางหมวดหมู่สินค้า (Categories) - ใช้จัดกลุ่มสินค้า
model Category {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  description   String?
  products      Product[] // ความสัมพันธ์: หมวดหมู่มีสินค้าหลายรายการ
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// ตารางสินค้า (Products) - เก็บข้อมูลสินค้า
model Product {
  id                Int                 @id @default(autoincrement())
  sku               String              @unique // รหัสสินค้า (Stock Keeping Unit)
  name              String
  description       String?
  unitPrice         Float               // ราคาต่อหน่วย
  weight            Float?              // น้ำหนัก (ถ้ามี)
  dimensions        String?             // ขนาด (เช่น "10x20x30 cm")
  categoryId        Int
  category          Category            @relation(fields: [categoryId], references: [id])
  inventory         Inventory?          // ความสัมพันธ์: สินค้าสามารถมีข้อมูลคงคลัง
  orderItems        OrderItem[]         // ความสัมพันธ์: สินค้าสามารถอยู่ในคำสั่งซื้อ
  saleItems         SaleItem[]          // ความสัมพันธ์: สินค้าสามารถอยู่ในรายการขาย
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

// ตารางซัพพลายเออร์ (Suppliers) - เก็บข้อมูลผู้จัดหาสินค้า
model Supplier {
  id            Int       @id @default(autoincrement())
  name          String
  contactName   String?
  email         String?   @unique
  phone         String?
  address       String?
  orders        Order[]   // ความสัมพันธ์: ซัพพลายเออร์สามารถมีคำสั่งซื้อหลายรายการ
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// ตารางคลังสินค้า (Inventory) - เก็บข้อมูลจำนวนสินค้าคงคลัง
model Inventory {
  id                Int                 @id @default(autoincrement())
  productId         Int                 @unique
  product           Product             @relation(fields: [productId], references: [id])
  quantity          Int                 // จำนวนสินค้าคงคลัง
  locationId        Int?
  location          WarehouseLocation?  @relation(fields: [locationId], references: [id])
  minStockLevel     Int                 @default(0) // ระดับสต็อกขั้นต่ำ
  maxStockLevel     Int?                // ระดับสต็อกสูงสุด
  transactions      InventoryTransaction[] // ความสัมพันธ์: คลังสินค้าสามารถมีธุรกรรมได้
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

// ตารางที่ตั้งในคลัง (WarehouseLocations) - เก็บข้อมูลตำแหน่งในคลัง
model WarehouseLocation {
  id            Int         @id @default(autoincrement())
  name          String      @unique // เช่น "Shelf A1", "Zone B"
  description   String?
  inventories   Inventory[] // ความสัมพันธ์: ตำแหน่งสามารถเก็บสินค้าหลายรายการ
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// ตารางคำสั่งซื้อ (Orders) - เก็บข้อมูลการสั่งซื้อจากซัพพลายเออร์
model Order {
  id            Int         @id @default(autoincrement())
  orderNumber   String      @unique // รหัสคำสั่งซื้อ
  supplierId    Int
  supplier      Supplier    @relation(fields: [supplierId], references: [id])
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  orderDate     DateTime    @default(now())
  status        String      @default("PENDING") // เช่น PENDING, COMPLETED, CANCELLED
  totalAmount   Float       // ยอดรวม
  orderItems    OrderItem[] // ความสัมพันธ์: คำสั่งซื้อมีรายการสินค้าหลายรายการ
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// ตารางรายการในคำสั่งซื้อ (OrderItems) - เก็บรายละเอียดสินค้าในคำสั่งซื้อ
model OrderItem {
  id            Int       @id @default(autoincrement())
  orderId       Int
  order         Order     @relation(fields: [orderId], references: [id])
  productId     Int
  product       Product   @relation(fields: [productId], references: [id])
  quantity      Int
  unitPrice     Float     // ราคาต่อหน่วย ณ เวลาสั่งซื้อ
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// ตารางการขาย (Sales) - เก็บข้อมูลการขายให้ลูกค้า
model Sale {
  id            Int         @id @default(autoincrement())
  saleNumber    String      @unique // รหัสการขาย
  customerId    Int?
  customer      Customer?   @relation(fields: [customerId], references: [id])
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  saleDate      DateTime    @default(now())
  totalAmount   Float
  saleItems     SaleItem[]  // ความสัมพันธ์: การขายมีรายการสินค้าหลายรายการ
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// ตารางรายการในการขาย (SaleItems) - เก็บรายละเอียดสินค้าในการขาย
model SaleItem {
  id            Int       @id @default(autoincrement())
  saleId        Int
  sale          Sale      @relation(fields: [saleId], references: [id])
  productId     Int
  product       Product   @relation(fields: [productId], references: [id])
  quantity      Int
  unitPrice     Float     // ราคาต่อหน่วย ณ เวลาขาย
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// ตารางลูกค้า (Customers) - เก็บข้อมูลลูกค้า
model Customer {
  id            Int       @id @default(autoincrement())
  firstName     String
  lastName      String?
  email         String?   @unique
  phone         String?
  address       String?
  sales         Sale[]     // ความสัมพันธ์: ลูกค้าสามารถมีการขายหลายรายการ
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// ตารางธุรกรรมคลังสินค้า (InventoryTransactions) - บันทึกการเคลื่อนไหวของสินค้า
model InventoryTransaction {
  id            Int       @id @default(autoincrement())
  inventoryId   Int
  inventory     Inventory @relation(fields: [inventoryId], references: [id])
  type          String    // เช่น RECEIVE, SELL, ADJUST
  quantity      Int
  description   String?
  createdAt     DateTime  @default(now())
}